CREATE USER owner_track WITH PASSWORD 'dctvgjrtlf'
  NOCREATEDB NOCREATEUSER;

CREATE SCHEMA owner_track
       AUTHORIZATION owner_track;
COMMENT ON SCHEMA owner_track IS 'Владелец объектов системы TRACK';

CREATE TABLESPACE user_data
  OWNER owner_track
  LOCATION '/var/lib/pgsql/data/dbs';

CREATE TABLESPACE user_ind
  OWNER owner_track
  LOCATION '/var/lib/pgsql/data/ind';

CREATE USER owner_www WITH PASSWORD 'nikfjr89'
  NOCREATEDB NOCREATEUSER;

CREATE USER owner_dev WITH PASSWORD 'lktw2qplyo'
  NOCREATEDB NOCREATEUSER;

CREATE USER adm_sprv WITH PASSWORD 'lktw2qplyo'
  NOCREATEDB NOCREATEUSER;


GRANT T01_OPER_WWW     TO OWNER_WWW;
GRANT TRACK_SERVER_ALL TO OWNER_WWW;

GRANT T03_SPRV_DEV     TO ADM_SPRV;
GRANT TRACK_SERVER_ALL TO ADM_SPRV;


GRANT T04_ADM_DATA_SENS TO OWNER_DEV;
GRANT TRACK_SERVER_ALL  TO OWNER_DEV;

GRANT USAGE ON SCHEMA OWNER_TRACK TO OWNER_DEV;
GRANT USAGE ON SCHEMA OWNER_TRACK TO OWNER_WWW;
GRANT USAGE ON SCHEMA OWNER_TRACK TO ADM_SPRV;
GRANT SELECT, INSERT, UPDATE, DELETE ON spatial_ref_sys, geometry_columns TO OWNER_TRACK;






-- defines following groups with different access to posgis tables
-- pgis_admins	     people, which creates new tables with geomtry columns
--                   a) right ALL on spatial_ref_sys, geometry_columns
--		     b) rigth ALL on every table with geomtry columns
-- pgis_users        people, which manipulate data in tables with geomtry columns     
--                   a) rigth SELECT on spatial_ref_sys, geometry_columns
--		     b) rigth INSERT,UPDATE,DELETE on every table with geomtry columns
-- pgis_webusers     people, which only looks an gis data like webuser 
--                   a) rigth SELECT on spatial_ref_sys, geometry_columns
--                   b) rigth SELECT on every table with geomtry columns
--                   (if webuser should be able to manipulte data, the admin must 
--                    add this right seratly)
--
-- We get the rigth b) by implemantate
-- 1) a function SetPgisTableRights(a_table_name)
--    it creates three new GRANT Rules for the table A_TABLE_NAME
-- 2) an insert-RULE on geometry_columns, which calls this function everytime, 
--    a new entry is inserted into  geometry_columns. , the trigger creates 
--
-- defines following default users
-- pgis_admin        member of pgis_admins
-- pgis_user         member of pgis_users
-- mapserv           member of webuser, could be used for the connect-specification 
--                   in the configuration-file of mapserver (z.B. demo.map) 
--
-- open problem:  DropGeometryColumn() needs system rights, cause it changed something 
-- in the table pg_attribute  
-- the script shp2pgsql creates lines like 
--    select DropGeometryColumn('geomtest','radweg','the_geom');
--    drop table radweg ;
-- maybe, if the hole table will be droped, it would be better to say
--    DELETE FROM geometry_columns WHERE f_table_name = 'radweg';
--    DROP TABLE radweg ;
-- we only need DropGeometryColumn(), if the table should be alive, after removing
-- the geometry field, but the shp2psql wants to throw away the old structure
--
-- by lczub@t-online.de (Luiko Czub, Freiburg) 27.012002, postgis-0.6.2
-- (sorry for my bad english, hope you understand, what I'am doing)


-- default users for postgis
--CREATE USER pgis_admin;
--CREATE USER pgis_user;
--CREATE USER mapserv;

-- Group pgis_webusers, pgis_users, pgis_webusers
--CREATE GROUP pgis_admins WITH USER pgis_admin;
--CREATE GROUP pgis_users WITH USER pgis_user;
--CREATE GROUP pgis_webusers WITH USER mapserv;

-- rights for group pgis_webusers
--GRANT SELECT ON spatial_ref_sys, geometry_columns TO GROUP pgis_webusers;
--GRANT SELECT ON spatial_ref_sys, geometry_columns TO GROUP pgis_users;
--GRANT ALL ON spatial_ref_sys, geometry_columns TO GROUP pgis_admins;

-- Function, which adds the specific PostGIs Rigths for a new table
--CREATE FUNCTION SetPgisTableRights(varchar) RETURNS text AS '
 --      DECLARE
--		table_name alias for $1;
 --      BEGIN
--		EXECUTE ''GRANT ALL ON '' || table_name || '' TO GROUP pgis_admins '';
--		EXECUTE ''GRANT SELECT, INSERT, UPDATE, DELETE ON '' || table_name || '' TO GROUP pgis_users '';
--		EXECUTE ''GRANT SELECT ON '' || table_name || '' TO GROUP pgis_webusers '';
--		return ''PostGis-Rights set for table '' || table_name;
--       END;
--       ' LANGUAGE 'plpgsql';

-- RULE on geometry_columns, which set the GRAND Rights, we need
--CREATE RULE SetPgisTableRights AS ON INSERT
--       TO geometry_columns
--       DO SELECT SetPgisTableRights(new.f_table_name);




-- drops special postgis groups, default users, 
-- the function SetPgisTableRights() and the rule SetPgisTableRights
-- by lczub@t-online.de (Luiko Czub, Freiburg) 27.01.2002, postgis-0.6.2

-- the default users
--DROP USER mapserv;
--DROP USER pgis_user;
--DROP USER pgis_admin;

-- the postgis groups
--DROP GROUP pgis_webusers;
--DROP GROUP pgis_users;
--DROP GROUP pgis_admins;

-- the function 
--DROP FUNCTION SetPgisTableRights(varchar);

-- the rule
--DROP RULE SetPgisTableRights;
